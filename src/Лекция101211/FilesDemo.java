package Лекция101211;

// На этой лекции мы будем учиться работать с файлами. Зачем работать с файлами? Когда мы создаём какую то
// прогграмму, пишем какой то код. Допустим говорим

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

public class FilesDemo {

    public static void main(String[] args) throws IOException {

//        int count = 0; // создай число count (счетчик)
//        count++; // увеличь count на еденицу
//        System.out.println(count); // выведи count

        // Что произойдет? мы увидим в терминале "1". Что за count? Я хочу посчитать сколь раз у меня
        // запускалась эта программа. Казалось бы всё просто с первого взгляда. Создали счётчик, после
        // запуска увеличили его на единичку и вывели результат в терминал. НО если мы запустим снова,
        // у нас всё обнулится и будет снова единица. По сути мы не можем решить простейшую задачу:
        // Выводить в терминал количество запусков программы за сегодня.
        // Вот пример почему нам нужно знать как работать с файлами, как сохранять данные в файлы, откуда
        // всё брать. Перед тем, как изучать такую важну и сложную штуку, как база данных, мы сначала
        // научимся простому но не менее важному, это умение сохранять данные в текстовый файл и
        // получать данные из текстового файла. Начнём с этого.

        //Эту программу мы заполним позже

        //Итак, для работы с файлами есть такая библиотека Files. Импортируем её.

        //Files

        // Files - это класс, который позволяет работать с файлами: мы можем записывать, считывать, копировать,
        // создавать репозитории, удалять найти и т.д. Мы пройдемся по основным вещам. Для начала, перед тем
        // как работвть с файлом, нам нужно знать где этот файл хранится, т.е. указать какой то путь к файлу.
        // Предлагаеттся хранить файл в корневой папке. Потому что чтобы задать путь необходимо использовать
        // интерфейс Path.

//        Path filesPath = Path.of("text.txt"); //Мы говорим программе что мы работаем с файлом, который
        // должен лежать "text.txt". Т.е. в папке "untitled1". Если мы хотим его кудато дальше просунуть,
        // то нужно указать другой пакет. Сразу возникает вопрос: файла то нет. Это нормально. Мы можем
        // работать с файловой системой, либо сказав, что вот у нас уже есть файл давай туда что то добавляй,
        // либо мы можем просто сказать. У нас файла нет, создай его, а потом туда добавляй. Или мы можем сказать
        // Создай файл с его нет, если он есть, не создавая работы с ним. Ну, то есть мы можем этот процесс,
        // оставить эту логику На саму программу пускай разбирается, сама.  Есть файл отлично, значит,
        // работаем с ним, нет файла, пускай создаёт. То есть тут на самом деле все довольно просто, и есть
        // куча разных вариантов вариации, как нам поступить и все довольно удобно реализовано.

//        Path filesPath2 = Path.of("text.txt"); // Так вот здесь указываем путь файла. Теперь мы хотим
        // туда что то записать. Используем для этого тот самый класс Files и в нем строку writeString,
        // и внём два параметра. Первый это путь filesPath2 который только что создали. И второе, строка
        // которую мы хотим сохранить "hello". Ну, то есть указываем название файла и указываем саму строку.

//        Files.writeString(filesPath2, "hello");

        //И казалось бы, вроде вот все вроде все. Но запустив мы в терминале получили исключение.

//     java: unreported exception java.io.IOException; must be caught or declared to be thrown

        // Вот этот момент как раз ради которого мы и проходили try и catch. И вообще, понятие исключений.
        //Что происходит на самом деле? Разработчики, которые писали вот этот класс файлов. И которые писали
    // в нем метод writeString, они указали, что этот метод может выбрасывать аекцепшн. Они сказали, что в
        // какой то момент, может произойти непредвиденная ошибка.

    //Какие могут быть ошибки при работе с файлами? Файл занят, файл не найден. Нет, прав на изменения не смог
    // сохранить, файл не создан. И об этом нам и хочет сказать разработчик. И об этом нам и хочет сказать
        // разработчик. При работе с ним Вас может быть куча разных исключений, то есть исключительных как раз
        // таких ситуации, когда файл кем то уже занят. Когда файл закрыт, закрыт доступ на изменение на чтение
        // он нам говорит, что мы должны это учесть и программа не запустится, пока мы это не учтем.
        //Мы направляем на writeString нажимаем вот эту кнопку синюю. У нас в самом начале, где вызывали psvm
        // появляется throws IOException т.е. исключчение входа/выхода. Что файл, может быть, запрещен, мы не
        // можем там с него считать данные. Мы не можем там что то
        // записать. Далее после public static void main(String[] args) throws IOException мы можем запустить
        // программу

        Path filesPath3 = Path.of("text.txt"); //Указать путь к файлу
        Files.writeString(filesPath3, "hello Andrei"); // сохраняем строку в файл

        // Как результат у нас появился файл text.txt, где написан наш текст "hello Andrei"
        // Чтоже произошло? Когда у нас не было throws IOException, мы не могли запустить код. он нам говорил:
        // Обязательно добавьте throws IOException нажав на кнопку, либо второй способ используйте try и catch.
        // Пример применения try и catch представлен в java class "Metod2". Но этот вариант более долгий, больше
        // кода. Первый более простой. Итак выше мы научились сохранять.
        //
        // Теперь учимся СЧИТЫВАТЬ данные.

        // Чтобы считать что то из файла, нужно указать путь

        String stringFromText = Files.readString(filesPath3); // считываем текс из файла в строку
        System.out.println(stringFromText);

        // Получается, мы выше сами сохранили файл, а потом здесь же считали текст в строку

       //Ниже представлен пример создания собсвенного файла из другой директории. Для этого прописываем всё
       // как указано ниже, но дополнительно ещё в корневой папке создаём новый файл (также как и создавать
       // новый класс), называем его также, как мы и указали в 1 строчке "mySuperTextFile.txt". И пишем там что
        // нибудь. Например "Андрей как дела дружище!!! Всё будет хорошо, лучше всех". Ну и далее вызываем
        // в терминал.

        Path myFilePathToRead = Path.of("mySuperTextFile.txt"); //Указать путь к файлу
        String stringFromText2 = Files.readString(myFilePathToRead);
        System.out.println(stringFromText2);

    // Кроме того, если в названии файла укажем слэш "/", Path myFilePath = Path.of("myLoveFail.txt");
    // то данный файл можно перетащить в любое место, в любую другую папку, например в нашу "Лекция 101211".
        // Далее на данном файле который перенесли нажимаем правой кнопкой мыши и нажимаем "Copy Path/Reference.
        // Далее из всех вариантов копируем тот путь который называется "Patch From Content Root" и вставляем его
        // перед названием нашего файла, т.е. перед слэшем "/",
        // т.е Path myFilePath = Path.of("src/Лекция101211/myLoveFail.txt")

        Path myFilePath = Path.of("src/Лекция101211/myLoveFail.txt"); //Указать путь к файлу
        String stringFromText3 = Files.readString(myFilePath);
        System.out.println(stringFromText3);

    // throws IOExceptio необходим не только при сохранении, но и при чтении. Т.е. если сейчас в начале файла
        // его убрать, то ничего у нас в терминале не покаже кроме ошибки

        // Далее посмотрим как записать несколько строк, а также как прочитать несколько строк, а для
        //  этого перейдем в другой класс MultipleLinesFile

    }
}
