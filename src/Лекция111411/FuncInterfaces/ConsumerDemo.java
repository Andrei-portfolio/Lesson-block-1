package Лекция111411.FuncInterfaces;

/* ДАЛЕЕ ПЕРЕХОДИМ К НОВОЙ ТЕМЕ ФУНКЦИОНАЛЬНЫЕ ИНТЕРФЕЙСЫ. Данная тема совсем не похожа на то, что
мы изучали до этого. Является довольно таки сложной. Поэтому если усвоим её хотябы на 50%,
будет хорошо.


Так зачем же нужны функц. интерфейсы? В джава существуют некоторые методы, которые как раз на вход
просят реализацию тех самых функц. интерфейсов. Например, сортировка в HasMap
 */

import java.util.List;

public class ConsumerDemo {

    public static void main(String[] args) {
        List<String> names = List.of("Галина", "Александр", "Михаил", "Евгения"); // Создадим список строк:имена
        //и напишем метод, который будет выводить эти имена на экран

        List<String> names2 = List.of("Маруся", "Фёдор", "Яков", "Елена");// Создадим второй список

        printName(names);// Только послесоздания метода private static void printName (List<String> names)
        // (ниже) мы можем вывести список в терминал
        printName(names2);
    }
        /* private static void printName (){//метод, который будет выводить эти имена на экран
           System.out.println(names);// но мы не можем здесь написать names, он не понимает.
        }
            Но даже если бы и понимал, например если мы захотим создать ещё один список,
            нам опять нужно будет создавать новый метод?

            private static void printName2 (){//метод, который будет выводить  имена на экран
            System.out.println(names2);// но мы не можем здесь написать names2, он не понимает
        }
        А если будет нужен третий список? Но нет смысла писать абсолютно повторяющийся код.
        Изменяется только переменная names.

        Так что же мы сделаем? А мы в нашем методе в качестве аргумента передадим какой то список
        */

    private static void printName(List<String> names) {//метод, который будет выводить  имена на экран
        System.out.println(names);
    }
    // Только после этого мы можем вывести список в терминал. Т.е. один метод с помощью которого
    // мы будем передавать наши аргументы. Далее, чтобы не путаться перейду в другой класс
    // ConsumerDemo2
}
