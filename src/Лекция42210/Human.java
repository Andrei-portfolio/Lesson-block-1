package Лекция42210;

    // ФИО мы можем хранить в строке String, серию паспорта также в строке String. Если же с числами будем производить
    // арифмитические данные, то хранить будем в стоке int или Long. А где же мы можем хранить данные о целом человеке
    // (Human)???? У него же МНОГО ПАРАМЕТРОВ, и мы не можем взять ЧТО ТО ОДНО, String или Int. Например,

    //    String Human = "Борис Борисович Борисов 10.02.1986 Москва Мужчина Брюнет";
    //    System.out.println(Human);

    // Видно, что строка становится всё длиннее и длинее. Соответственно слишком много информации. Кроме того,
    //  рождения и т.д. каким образом нам в какой то момент обратиться к городу (Москва), либо к ФИО (Борис
    // Борисович Борисов) или году и вытащить их? А для этого Human нужно хранить где-то отдельно. Создав при этом
    // сложный тип данных - класс. Вот String это сложный тип данных, так как состоит из нескольких char (используется
    // в Java для хранения символов). Так вот, при создании класса используются всё теже правила, как и с переменными,
    // но дополнительное правило - его название должно начинаться с заглавной буквы (это договоронность среди всех
    //  разработчиков, автотестировщиков и т.д. Ниже приведен пример создания класса "Human", где перечисленны
    //  определенные параметры name, age, phone и т.д. Но необходимо обратить вниманее, что в самом начале создания
    // класса, например Human, мы не знаем, эти данные (его имя, сколько ему лет, телефон и т.д.). Мы просто сказали,
    // что у него есть эти данные, но чему они на самом деле равны, мы пока не знаем. При создании класса мы сначала
    //  описываем присущие ему характеристики (параметры). Ну а далее, необходимо конкретизировать

public class Human {

    String name; // Имя
    int age; // Возраст
    String phone; // Телефон
    String email; // Эл. адрес
    double reting; // Рейтинг

    // ЭТО ПРОДОЛЖЕНИЕ ОПИСАНИЯ ДЕЙСТВИЙ. НАЧАЛО см. ВО ВКЛАДКЕ MyVk

    // Так, при создании нескольких объектов, например более 1го Human, заполнять каждый раз human.name, human.age,
    // human.phone, и т.д. будет занимать много времени. Как это можно обойти? Мы можем все параметры передать прям
    // в скобки "Smartphone iphone = new Smartphone(..........);", тем самым записать объект в одну строчку. Как это
    // сделать?У классов есть конструктор. Это вещь с помощью которой мы можем создать своего Human. Что значит собрать?
    // Т.е. задать те самые параметры name, age, phone и т.д. через конструктор в одну строчку. Так же в конструкторе
    // можно настроить все наши ограничения. Т.е. сказать, что если возраст меньше 14 лет, то нельзя регистрироваться.
    // Для этого, нужно выделить нашего "Human" во вкладке "Human", т.е здесь, где мы изначально создавали этот класс
    // и правой кнопкой мыши нажать Generate далее Constructor. Выделяем либо все параметры, либо только необходимые нам

    //   public Human() {
    //   System.out.println("Я родился");
    //    }

    // Итак, создался  public Human. Что значит  public - это и есть конструктор. Human - это название класса. Далее
    // пишем внутри фигурных скобок "{ }". Что мы пишем: Конструктур "public Human" на самом деле существует всегда,
    // даже если мы о нём не знаем, а он на самом деле есть. Он уже такой был, даже тогда когда мы его не написали.
    // Он вызывается автоматически всегда, когда мы создаём объект класса с помощью new - "Human  human = new Human()".

    // Тем самым если мы запустим ответ в консоль во вкладке "MyVk" мы увидим, что надпись "Я родился" подтянется туда.
    // Причем столько раз, сколько раз мы создавали new Human. В нашем случае 2 раза.

    //Так что же с этим конструктором можем делать? Мы можем передать в него параметры. Мы можем сказать конструктору,
    // например: Я хочу, чтобы при создании человека, здесь мы писали его имя, либо какое либо сообщение "massage".
    // Для этого прописываем в параметрах конструктора String massage, в System.out.println("Я родился. " + massage).
    // Кроме того, во вкладке "MyVk" в строке создания переменной класса "Human" - Human human = new Human
    // ("Всем привет!!!") написали massage "Всем привет!!!". А при создании второго человека в той же вкладке massage
    // "Ура!!!". Запускаем ответ в консоль и получаем следуещее: "Я родился. Всем привет!!!" и "Я родился. Ура!!!"

    //public Human(String massage) {
    //  System.out.println("Я родился. " + massage);

    //Это пример передачи бесполезного для нас параметра. Далее будем передовать все нужные для нас параметры,созданные
    //  в классе Human: name, age, phone и т.д. И не будем расписывать так, как мы это делали выше во вкладке MyVk
    //
    //    Human  human = new Human;
    //    human.name = "Борис";
    //    human.age = 100;
    //    .....................

    //    Итак, перечисляем наши параметры в скобках и получается следующее:

    public Human(String name, int age, String phone, String email, double reting) {

        // Проще говоря, мы говорим, что сюда в (..........) будут переданы какие нибудь значения. Прими эти значения,
        // как поля name, age.....Заполни их и привежи к нашему человеку. Т.е. мы обязываем теперь человека, при
        // создании  указывать сразу свой номер, телефон и т.д. И вот в этом вся суть конструктора.

        this.name = name;
        this.age = age;
        this.phone = phone;
        this.email = email;
        this.reting = reting;

        // ПРОДОЛЖЕНИЕ ОПИСАНИЯ ДЕЙСТВИЙ см. ВО ВКЛАДКЕ MyVk.

    }
}















