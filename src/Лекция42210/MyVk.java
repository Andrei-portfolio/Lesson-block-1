package Лекция42210;

    //Ребята, привет)
    //В рамках предстоящей лекции проведу вам небольшой ликбез про классы и объекты, чтобы всё на лекции было понятно
    //Для начала, разберемся что есть класс, а что - объект.
    //
    //Давайте представим себе обычный коробок спичек. Весь его набор характеристик: размер, цвет, вес, количество спичек
    // и всё что можно делать с ним - это то, что мы называем класс (можно в упрощённом варианте рассматривать его как
    // описание того, какими свойствами и поведением должен обладать объект после его создания). Объект же - это
    // конкретный спичечный коробок, который мы держим в руках, т.е. объект - это экземпляр класса, созданный по тому
    // шаблону, который мы описали. Таким образом, чтобы нам получить объект из класса нам нужно использовать ключевое
    // слово new и поместить этот объект в переменную, чтобы иметь возможность использовать методы объекта (но это не
    // всегда так, про static поговорим в другой раз)
    //
    // Резюмируя, класс - это шаблон, по которому строится объект; объект - конкретный экземпляр класса
    //
    //    Пример:
    //    public class Hello {
    //    public void greetings() {
    //    System.out.println("Hello!");
    //    }
    //}
    //
    //    public class Main {
    //    public static void main(String[] args) {
    //    Hello hello = new Hello(); // создали объект
    //    hello.greetings(); // вызвали метод нашего объекта
    //    }
    //}

public class MyVk {

    public static void main(String[] args) {

        // Ниже представлен наш тип данных Human (в честь названия нашего класса). Где мы создали объект от класса Human.
        //  Но мы создали своего, пока пустого человека. Что нам это дало?

        // Human  human = new Human("Всем привет!!!"); //Т.е. здесь мы создали переменную класса "Human" и дали
        // ей название "human" (такого же типа как и int или String, только мы её создали сами) и она пока пустая.
        // new Human() говорит о том, что мы хотим создать объект от класса Human.
        //Далее мы можем через точку (".") обратиться к параметрам (полям) созданного нами человека.

        //        human.name = "Борис";
        //        human.age = 100;
        //        human.phone = "89277495627";
        //        human.email = "and@gmail.com";
        //        human.reting = 4.95;

        // Т.е. здесь если подытожить, мы создали класс, создали объект и обратились к его полям. Далее мы можем создать
        // ещё сколько угодно людей. Например второго человека

        //        Human  human2 = new Human("Ура!!!");
        //        human2.name = "Сергей";
        //        human2.age = 64;
        //        human2.phone = "89277777777";
        //        human2.email = "serg@gmail.com";
        //        human2.reting = 4.64;

        //        System.out.println("Сколько Борису лет? - " + human.age + ". А сколько Сергею лет? - " + human2.age );

        //        Специально убрал email и reting, чтобы показать пример что выдаст консоль, если запрошу эти данные
        //        human2.email = "serg@gmail.com";
        //        human2.reting = 4.64;
        //        System.out.println(human2.email); // Выдаст "null"
        //        System.out.println(human2.reting); // Выдаст "0.0"

//   System.out.println(human2.name + " " + human2.age + " " + human2.phone + " " + human2.email + " " + human2.reting);

    // Далее приведен пример создания ещё одной переменной класса Smartphone с названием iphone

        Smartphone iphone = new Smartphone();
        iphone.brand = "iphone";
        iphone.model = "15";
        iphone.screen = "1179*2556 пикселей";
        iphone.coreNumber = 8;
        iphone.capasity = 3300;

        System.out.println(iphone.brand);

        // Далее мы рассмотрим частично два вопроса: Первый - что же делать если 100 человек, и второй - что делать если
        // хотим запретить слишком маленьким пользователям регистрироваться.

        // Так, при создании нескольких объектов, например более 1го Smartphone, заполнять каждый раз iphone.brand,
        // iphone.model, iphone.screen будет занимать много времени. Как это можно обойти? Мы можем все параметры
        // передать прям в скобки "Smartphone iphone = new Smartphone(..........);", тем самым записать объект в одну
        // строчку. Как это сделать? У классов есть конструктор. Это вещь с помощью которой мы можем создать своего
        // Human. Что значит собрать? Т.е. задать те самые параметры name, age, phone и т.д. через конструктор в одну
        // строчку. Так же в конструкторе можно настроить все наши ограничения. Т.е. сказать, что если возраст меньше
        // 14 лет, то нельзя регистрироваться. Для этого, нужно выделить нашего "Human" во вкладке "Human", т.е где мы
        // изначально создавали этот класс.

        // ДАЛЕЕ ПОРЯДОК ДЕЙСТВИЙ ОПИСЫВАЛ НЕПОСРЕДСТВЕННО ВО ВКЛАДКЕ "Human"


        // ЭТО ПРОДОЛЖЕНИЕ ОПИСАНИЯ ДЕЙСТВИЙ. НАЧАЛО см. ВО ВКЛАДКЕ Human.

        // Итак, на основании созданных во вкладке Human данных, сделаем следующие действия:
        // введём Human  human = new Human() и в скобках поставим кавычки и наш первый параметр "name:" подтянется сам.
        // После того, как написали имя и поставили запятую, ставим опять кавычки и наш второй параметр "age:"
        // подтянется также. Правда в этом случае кавычки нужно будет удалить, так как данный параметр у нас указан в
        // числовом выражении, а не строкой. И так делаем, пока не закончатся наши параметры.

        Human human = new Human("Серёга", 24, "88462285739", "Rest@gmail.com", 4.84);

        // Кроме того, если мы нажмём Ctrl + Q, то в окошке будет видна подсказка в виде нашего конструктора из вкладки
        // Human. Далее проведём проверку, и проверим ответ в консоли

        System.out.println("Как его зовут? - " + human.name);
        System.out.println("Сколько ему лет? - " + human.age);
        System.out.println(human.name + human.age + human.phone + human.email + human.reting);

        //Так же можем создать второго и более человека. Тупо копируем первого человека, меняем на наименование на
        // human2, а так же изменяем значения параметра:

        Human human2 = new Human("Ванюша", 124, "88462222222", "Soap@gmail.com", 4.34);
        System.out.println("Как его зовут? - " + human2.name);
        System.out.println("Сколько ему лет? - " + human2.age);
        System.out.println(human2.name + human2.age + human2.phone + human2.email + human2.reting);

        //Как результат получаем всего одну строчку. И если необходимо создать 100 человек, то будет всего 100 строчек.
        // Но это не самое главное. Представьте, что наш человек не достиг того возраста, который разрешен для
        //регистрации на сайте. Например ему нет 18 лет. Он может не вбивать возраст, но наш конструктор не позволит
        // это, так как не все заданные нами параметры заполнены. Т.е. передаётся 4 параметра, а надо 5. Ну это
        // абстрактный пример. Конструктор позволяет не ошибаться и не запустит код, пока мы не заполним все параметры.
        //Так же из преимуществ, что любые заданные нами значения мы можем поменять. Например, если мы после

        // Human human = new Human("Серёга",24,"88462285739","Rest@gmail.com",4.84); поставим
        // human.age = 50;

        //Если мы запустим такой вариант, то возраст нам покажет не 24, а 50.

        //Комната находится в квартире. Поэтому необходимо сделать так, чтобы комната создавалась внутри квартиры.
        // Т.е. класс Room, создался в классе Flat. Т.е. не сам класс, а объект класса Room создавался в классе Flat

    }
}
