package Лекция132111.ClassesOOP2;

public class Vk {

    public static void main(String[] args) {
        User user1 = new User("John", 1);
        User user2 = new User("User123", 2);
        User user3 = new User("Boris", 3);
        Moderator moderator = new Moderator("Moder234", 5);

        user1.sendMessage("Привет! я юзер");
        moderator.sendMessage("Привет! я модератор");
        moderator.unBanMePlease();//За модератора тоже можем написать "Пожалуйста, разбаньте, я больше так не буду!"

        /*Пробовали в User написать public метод unBanMePlease. Но модератору не логично просить разбанить. В таком
         случае мы сделали метод unBanMePlease приватным private. После чего данный метод становится недоступным для
        модератора и других классов. Т.Е. ЕСЛИ МЫ ХОТИМ ИСПОЛЬЗОВАТЬ МЕТОД ТОЛЬКО В ОДНОМ КЛАССЕ И НЕ В КАКИХ
        ДРУГИХ, ДАЖЕ НЕ В ТЕХ, КОТОРЫЕ НАСЛЕДНИКИ (moderator, ADMIN), ТО НЕОБХОДИМО ДАННЫЙ МЕТОД СДЕЛАТЬ private. И ВСЁ.
        НО ДАННЫЙ ПРИНЦИП РАБОТЫ ДАННОГО МЕТОДА МЫ И ТАК ЗНАЛИ. ПОЭТОМУ СЕЙЧАС РАССМОТРИМ ЕЩЁ ОДИН ТИП ДОСТУПНОСТИ,
        КРОМЕ public И private. ТАК ВОТ ТРЕТИЙ ТИП ЭТО protected, который ДОСТУПЕН ТОЛЬКО В ЭТОМ КЛАССЕ И В ЕГО
        ПОТОМКАХ (наследниках). После того, как мы сделали protected метод unBanMePlease в классе User, данный метод
        moderator.unBanMePlease(), без проблем отработал.

        В ОБЩЕМ КАК СКАЗАЛ СЕМЁН, ПРИМЕР ПРИМЕНЕНИЯ ТИПА protected НЕ СОВСЕМ УДАЧНЫЙ, ТАК КАК ОН ВСЁ НАПУТАЛ.
        ОН ДУМАЛ, ЧТО В КЛАССЕ "VK" МЫ НЕ СМОЖЕМ ВЫЗВАТЬ МЕТОД unBanMePlease(), А МЫВЫЗВАЛИ ЕГО. АЛЕКСЕЙ КУЗНЕЦОВ
        ПРОКОМЕНТИРОВАЛ, ЧТО ЭТО ПОТОМУ ЧТО:

        "prtected виден как public, потому что у родителя и у детей. Просто дети его могут 100% наследовать,
        никто не запрещает его вызывать на объектах родителя и наследниках"
        ПОЭТОМУ СЕМЁН ПОКАЖЕТ ДРУГОЙ ПРИМЕР, БОЛЕЕ ПОДХОДЯЩИЙ

        public - ДОСТУПЕН ВСЕМ КЛАССАМ
        private - ДОСТУПЕН ТОЛЬКО В ЭТОМ КЛАССЕ
        protected - ДОСТУПЕН ТОЛЬКО В ЭТОМ КЛАССЕ И В ЕГО ПОТОМКАХ

         И ПОСЛЕДНЕЕ, ИНОГДА МОЖЕТ ПОНАДОБИТСЯ ИСПОЛЬЗОВАТЬ moderator КАК User. Т.Е НАМ МОДЕРАТОР НУЖЕН КАК САМ ЧЕЛОВЕК.
         ЕСЛИ МЫ ЕГО СОЗДАДИМ ПО ОБЫЧНОЙ СХЕМЕ "Moderator moderator = new Moderator("Moder234", 5);", ТО ЕСЛИ
         НАМ ПРИДЁТ В ГОЛОВУ использовать случайно moderator.sendAlert(). И он отправил страшное
         сообщение о бане. Чтобы избежать этого, если нам нужен moderator чисто как User, то в необходимо
         заменить в строчке приведенной выше Moderator на User. И получиться User moderator = new Moderator("Moder234", 5);
        Это нам даёт, что модератор может делать всё что делает юзер, но не сможет написать moderator.sendAlert()
         */
    }
}