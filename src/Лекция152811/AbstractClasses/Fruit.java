package Лекция152811.AbstractClasses;

//public class Fruit {

    //protected String color;

/*
    Это фрукт, но это обобщенное понятие, мы не знаем каакой он, кислый или сладкий, большой
    или маленький, какой на вкус, какая форма и т.д. В тоже время мы можем создать класс яблоко.
    Создать в нём конструктор, в котором указать цвет, а также где сделать его наследником,
    а данный класс, родителем. В этом классе можем сделать гетеры, а также сделать какой то
    абстрактный метод
 */

    public abstract class Fruit {

    protected String color;

    protected String size = "big";// у фруктов большой размер

        public String getColor() {// Можем сделать, как обычные методы get и set, так и
                                  // абстрактный метод, который возвращает цену
            return color;
        }

        public String getSize() {
            return size;
        }

        public abstract int getPrice();/*Мы объявили абстрактный метод, но не реализовали,
        т.е. как в интерфейсе. После чего, если мы перейдём в класс apple, banana, теперь
        выдаётся ошибка. Поэтому имплементируем в данных классах метод. И только после того,
        как имплементировали метод, ошибка ушла.

        Подитожим тем, что абстрактный класс это тоже самое, что и интнрфейс, но у абстр.класса
        может быть состояние, в нём можем указать какие то поля. Как принято считать,
        интерфейс - это действие (уведомление). А под абстр.класс подходит объект -
        например, фрукт
        */






    }




