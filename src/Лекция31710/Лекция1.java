package Лекция31710;

public class Лекция1 {

    public static void main(String[] args) {

        // System.out.println() - это функция (действие), которая выводит информацию на экран. В скобках данной
        // функции мы пишем аргумент. Т.е. что мы хотим передать

        System.out.println("Приветули. Как проходит учеба?"); // Пример текста
        System.out.println((2 + 2) * 5); // Пример числовых выражений
        System.out.println(1 == 1); // Пример числовых сравнений
        System.out.println(100 < 0);

        // ПЕРЕМЕННЫЕ

        //ЧИСЛОВЫЕ ПЕРЕМЕННЫЕ

        var balance = 127; // Говорит создай переменную, а вот какую, где она будет и сколько места занимает,
        // не говорит. Поэтому вместо Var будем использовать следующие типы числовых переменных: И long
        System.out.println(balance);

        byte bytebalance = 127; // число, которое умещается в границах байта от -128 до 127
        System.out.println(bytebalance);

        short shortbalance = 32766; // число, которое умещается в границах от - 32768 до 32767
        System.out.println(shortbalance);

        int intbalance = 2000000000; // число, которое умещается в границах от -2147483648 до 2147483647.
        // Используем всегда переменную int. Хоть для 1, хоть для 100 или 100000.
        // Иначе как пример, при цене товара в 120 руб использ byte
        // но через 2 дня цена товара увеличилась до 140. И чтобы не пришлось менять  byte на short, всегда
        // используем int
        System.out.println(intbalance);

        long longbalance = 4000000000000000000L; // число, которое умещается в границах от -9223372036854775808 до
        // -9223372036854775807 После цифр обяз. ставим букву L
        System.out.println(longbalance);

        //ДРОБНЫЕ ЧИСЛА

        float number = 10.5F;   // Менее точно и менее значение (от -3.4*1038 до 3.4*1038) . В конце всегда ставить "F".
        System.out.println(number);

        double number1 = 10.5; // Более крупные числа и более точно (от -+4.9*10324 до -+1.8*10308)
        System.out.println(number1);

        //ЛОГИЧЕСКИЕ ПЕРЕМЕННЫЕ

        Boolean name = true; // Имеет всего 2 значение: true (да) и false (нет) Если хотим какие то выражения сравнить,
        // проверить что то узнать, равно ли одно число другому. Использ, когда сложный код с ветвлением. Т.е.
        // допустим: Если пользователь зарегистрирован на сайте, то делай то то, если нет то .....
        Boolean name2 = false;

        char letter = 'a';   // Т.е. в переменную мы можем записать один символ в кодировке UTF-16.
        // Обязательно в ОДИНАРНЫХ кавычках. Диапазон хранимых значений от 0 до 65536

        String hello = "Привет Андрей86. Как дела?";   // Всё что пишем в двойных кавычках, это строка String
        System.out.println(hello);

        //ЧТО МЫ МОЖЕМ ДЕЛАТЬ С ПЕРЕМЕННЫМИ

        // Boolean - булева алгебра

        Boolean auth = true;
        Boolean holidays = true;
        Boolean birthday = false;

        System.out.println(auth && holidays); // Вывести результирующее значение. "&&" обозначает, чтобы были
        // соблюдены все условия. Т.е. например, если пользователь и авторизован и сегодня праздник, то он
        // получит скидку

        System.out.println(auth && holidays && birthday); // Т.е. если хоть одно из условий будет равно false, то
        // и результат нам должен возвратиться false

        System.out.println(auth || birthday);//Данный символ "||" обозначает, что нам достаточно для совпадения
        // всего лишь одного условия

        // Математические операции с числами

        int x = 15;
        int y = 5;

        System.out.println((x + y) / 2.5); // Вычесление в данном случае производится по правилам математики

        // Пример использования переменной String

        // Верблюжий стиль используется для наглядности написания составных слов, при котором несколько слов пишутся
        // слитно без пробелов. При этом каждое слово внутри фразы пишется с заглавной буквы

        String CarName = "BMW";
        System.out.println(CarName);

        // Подмена имени

        String Name = "Семён"; // В случае, если у нас везде записано одно имя, но вдруг его необходимо отобразить
        // например на латинице, мы не пишем опять: String Name = "Sam" , а пишем след. строкой сразу: Name = "Sam";
        Name = "Sam\n\n";    // В данном примере видно, что применение "\n" даёт нам возможность поставить пустые
        // строки м/у словами Т.е. сколько раз мы поставим данный символ, столько и пустых строк будет
        System.out.println(Name);
        System.out.println(Name);

        // Что нельзя делать?

        // Мы не можем начинать название с цифр. В середине и в конце можно. Нельзя использовать символы, только
        // определенные значения

        String username = "семён"; // Создали переменную. Следующим шагом, её необходимо будет где-то сохранить.
        // Для этого в след строке указываем куда её сохранить и что с ней сделать. Например приведенный
        // ниже метод будет изменять наше имя и прописывать его заглавной буквы
        username = username.toUpperCase(); // Если мы ставим после названия переменной "." (точку), то нам для выбора
        // предоставляется ряд методов.
        System.out.println(username);

    }
}
