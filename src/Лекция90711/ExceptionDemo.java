package Лекция90711;

import java.util.Scanner;

public class ExceptionDemo {

    public static void main(String[] args) {

        // ИСКЛЮЧЕНИЯ

        // Допустим, мы на вход получаем какое то число

        int firstNumber = new Scanner(System.in).nextInt();// Мы задаём число
        int secondNumber = new Scanner(System.in).nextInt(); // Потом задаём ещё одно число

        //System.out.println(firstNumber); //Проверили работает ли наш сканер. Действит. в терминал можно вбить
        // 2 числа
        //System.out.println(secondNumber);//Проверили работает ли наш сканер. Действит. в терминал можно вбить
        // 2 числа

        //System.out.println("Результат: " + firstNumber / secondNumber); // Делим одно число на другое

        //  Итак, если в терминал введем два числа 10 и 5. Соответственно 10/5 = 2. Ответ 2
        // Но что будет, если мы поделим на ноль. Программа выдает ошибку

        //        Exception in thread "main" java.lang.ArithmeticException: / by zero //
        //        at Лекция90711.ExceptionDemo.main(ExceptionDemo.java:20)

        // Это ИСКЛЮЧЕНИЕ. Т.е. на ноль делить нельзя, поэтому программа экстренно завершается и выдаёт
        // такую ошибку. Это банальный пример. Но бывает приложение или сайт выдаёт какое то исключение:
        // база данных перестала работать, или что то другое отвалилось, например интеграция.

        // Так вот, чтоб такого не было, чтоб посетитель не видел такое сообщение и не ушёл с нашего сайта,
        // мы как разработчики должны оборачивать такие опасные места try (пишем опасное место) и catch
        // (говорим что выводить, когда это происходит). И вместо красного кода типа "неизвестная ошибка",
        // в catch мы будем прописывать сообщение для пользователя "извините непредвиденная ошибка. Зайдите
        // позже" и т.д.

        //Как пример, применения try и catch в нашем случае, чтобы программа не выдавала ошибку

        try {
        System.out.println("Результат: " + firstNumber / secondNumber);
    }
        catch (Exception ex)
    {
        System.out.println("Делить на ноль нельзя");
    }

        //Ну и аналогичный пример, для деления двух других чисел firstNumber1 и secondNumber1

        int firstNumber1 = new Scanner(System.in).nextInt();
        int secondNumber1 = new Scanner(System.in).nextInt();

        try {
            System.out.println("Результат: " + firstNumber1 / secondNumber1);
        }
        catch (NullPointerException ex)
        {
            System.out.println("Делить на ноль нельзя");
        }
        catch (Exception ex)
        {
            System.out.println("Делить на ноль нельзя");
        }
        // говоря Exception ex, мы ловим не только ошибку деления на ноль, а все ошибки а "ex" это и есть
        // само исключение. Поэтому оборачивая в try и catch мы рискуем пропустить что то другое, в т.ч
        // свою ошибку. И если наш блок будет падать, и сразу автоматически выходить данное сообщение.
        // И мы об этом не узнаем. Поэтому чтобы избежать это будем использовать несколько блоков catch.
        // Например, NullPointerException ex, как показано на верху

        // try и catch нужен в тех случаях, когда мы заранее не можем знать, предугадать и описать проблему.
        // В таких местах программы когда что то может пойти не так, например интеграция со внешними сервисами,
        // с базой данных. Т.е когда мы подключаемся и что то может не пройти.

        // Бытовой пример. Нужно воткнуть вилку в розетку. Так вот при условном применении данного метода,
        // try будет говорить воткни розетку, а catch выдаст сообщение если питания не оказалось.

        // Ну а так это относится к разработчикам. К автотестировщикам поскольку по стольку.

        // Второй пример, более простой относящийся и к тестеровщикам. Если мы используем какой то специфичный
        // метод или функцию в работе. Она может нам сказать, что мы обязаны пробросить исключение. Она
        // скажет что мы используем такую вещь, которая может привезти к исключениям. Как это выглядит на
        // практике, это мы посмотрим на примере сегодняшней лекции, на примере работы с ФАЙЛАМИ.

    }
}
